import * as _wharfkit_antelope from '@wharfkit/antelope';
import { APIClient, Action, API, Transaction, Checksum256, PermissionLevel } from '@wharfkit/antelope';
import { TransactContextOptions, TransactContext, Session, SigningRequest, TransactHookResponse, AbstractTransactPlugin, SessionKitArgs, SessionKitOptions, SessionKit, SessionArgs, SessionOptions, SessionStorage, AbstractUserInterface, UserInterface, LocaleDefinitions, LoginContext, UserInterfaceLoginResponse, LoginOptions, PromptArgs, Cancelable, PromptResponse, UserInterfaceAccountCreationResponse, AbstractWalletPlugin, WalletPluginMetadata, WalletPluginConfig, WalletPluginData, ResolvedSigningRequest, WalletPluginSignResponse } from '@wharfkit/session';
import { WalletPluginPrivateKey } from '@wharfkit/wallet-plugin-privatekey';

declare function makeClient(url?: string): APIClient;

declare const mockChainId = "73e4385a2708e6d7048834fbc1079f2fabb17b3c125b146af438971e90716c4d";
declare const mockUrl = "https://jungle4.greymass.com";
declare const mockChainDefinition: {
    id: string;
    url: string;
};
declare const mockChainDefinitions: {
    id: string;
    url: string;
}[];
declare const mockPrivateKey = "5Jtoxgny5tT7NiNFp1MLogviuPJ9NniWjnU4wKzaX4t7pL4kJ8s";
declare const mockAccountName = "wharfkit1111";
declare const mockPermissionName = "test";
declare const mockPermissionLevel: string;

declare const mockTransactContextOptions: TransactContextOptions;
declare function makeContext(): TransactContext;

declare function mockData(memo?: string): Promise<{
    action: _wharfkit_antelope.Action;
    actions: _wharfkit_antelope.Action[];
    info: {
        server_version: string;
        chain_id: _wharfkit_antelope.Checksum256;
        head_block_num: _wharfkit_antelope.UInt32;
        last_irreversible_block_num: _wharfkit_antelope.UInt32;
        last_irreversible_block_id: _wharfkit_antelope.BlockId;
        head_block_id: _wharfkit_antelope.BlockId;
        head_block_time: _wharfkit_antelope.TimePoint;
        head_block_producer: _wharfkit_antelope.Name;
        virtual_block_cpu_limit: _wharfkit_antelope.UInt64;
        virtual_block_net_limit: _wharfkit_antelope.UInt64;
        block_cpu_limit: _wharfkit_antelope.UInt64;
        block_net_limit: _wharfkit_antelope.UInt64;
        server_version_string?: string | undefined;
        fork_db_head_block_num?: _wharfkit_antelope.UInt32 | undefined;
        fork_db_head_block_id?: _wharfkit_antelope.BlockId | undefined;
        getTransactionHeader(secondsAhead?: number | undefined): _wharfkit_antelope.TransactionHeader;
        equals(other: any): boolean;
        toJSON(): any;
    };
    session: Session;
    transaction: _wharfkit_antelope.Transaction;
}>;

declare function mockFetch(path: any, params: any): Promise<any>;

declare function mockLoginHook(): Promise<void>;
declare function mockTransactHook(request: SigningRequest): Promise<TransactHookResponse>;
declare class MockTransactPlugin extends AbstractTransactPlugin {
    id: string;
    register(context: TransactContext): void;
}
declare function mockTransactResourceProviderPresignHook(request: SigningRequest, context: TransactContext): Promise<TransactHookResponse>;
declare class MockTransactResourceProviderPlugin extends AbstractTransactPlugin {
    id: string;
    register(context: TransactContext): void;
}
declare const mockTransactActionPrependerPlugin: {
    id: string;
    register: (context: any) => any;
};
declare const mockMetadataFooWriterPlugin: {
    id: string;
    register: (context: any) => any;
};

declare const mockSessionKitArgs: SessionKitArgs;
declare const mockSessionKitOptions: SessionKitOptions;
declare const mockSessionKit: SessionKit;
declare const mockSessionArgs: SessionArgs;
declare const mockSessionOptions: SessionOptions;
declare const mockSession: Session;

declare class MockStorage implements SessionStorage {
    data: Record<string, string>;
    write(key: string, data: string): Promise<void>;
    read(key: string): Promise<string | null>;
    remove(key: string): Promise<void>;
    storageKey(key: string): string;
}

declare function makeMockAction(memo?: string): Action;
declare function makeMockActions(memo?: string): Action[];
declare function makeMockTransaction(info: API.v1.GetInfoResponse, memo?: string): Transaction;

declare class MockUserInterface extends AbstractUserInterface implements UserInterface {
    readonly logging = false;
    messages: string[];
    localeDefinitions: LocaleDefinitions;
    log(message: string): void;
    login(context: LoginContext): Promise<UserInterfaceLoginResponse>;
    onError(error: Error): Promise<void>;
    onLogin(options?: LoginOptions): Promise<void>;
    onLoginComplete(): Promise<void>;
    onTransact(): Promise<void>;
    onTransactComplete(): Promise<void>;
    onSign(): Promise<void>;
    onSignComplete(): Promise<void>;
    onBroadcast(): Promise<void>;
    onBroadcastComplete(): Promise<void>;
    prompt(args: PromptArgs): Cancelable<PromptResponse>;
    status(message: string): void;
    addTranslations(definitions: LocaleDefinitions): void;
    onAccountCreate(): Promise<UserInterfaceAccountCreationResponse>;
    onAccountCreateComplete(): Promise<void>;
}

declare function makeWallet(): WalletPluginPrivateKey;
declare class MockWalletPluginConfigs extends AbstractWalletPlugin {
    readonly metadata: WalletPluginMetadata;
    testModify: boolean;
    config: WalletPluginConfig;
    constructor(config?: WalletPluginConfig, initialData?: WalletPluginData);
    get id(): string;
    login(context: LoginContext): Promise<{
        chain: Checksum256;
        permissionLevel: PermissionLevel;
    }>;
    sign(resolved: ResolvedSigningRequest, context: TransactContext): Promise<WalletPluginSignResponse>;
}

export { MockStorage, MockTransactPlugin, MockTransactResourceProviderPlugin, MockUserInterface, MockWalletPluginConfigs, makeClient, makeContext, makeMockAction, makeMockActions, makeMockTransaction, makeWallet, mockAccountName, mockChainDefinition, mockChainDefinitions, mockChainId, mockData, mockFetch, mockLoginHook, mockMetadataFooWriterPlugin, mockPermissionLevel, mockPermissionName, mockPrivateKey, mockSession, mockSessionArgs, mockSessionKit, mockSessionKitArgs, mockSessionKitOptions, mockSessionOptions, mockTransactActionPrependerPlugin, mockTransactContextOptions, mockTransactHook, mockTransactResourceProviderPresignHook, mockUrl };
